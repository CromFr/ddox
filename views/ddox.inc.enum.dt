- import ddox.api;
- import ddox.highlight;
- import std.algorithm;

- void outputEnumDescription(EnumDeclaration enum_item, int hlevel)
	p The enum base type is
		code.prettyprint.lang-d!= info.formatType(enum_item.baseType, false)
		|.

	- if (enum_item.templateArgs.length)
		section
			- heading(hlevel, "Template arguments");

			.prototype
				code.lang-d <span class="kwd">enum</span> <span class="typ">#{enum_item.name}</span>
				- info.renderTemplateArgs(&_diet_output, enum_item);
				| #{enum_item.templateConstraint.length?"":";"}
					- if (enum_item.templateConstraint.length)
						br
						| <span class="kwd">if</span> <span class="pun">(</span>!{highlightDCode(enum_item.templateConstraint)}<span class="pun">);</span>

- void outputEnumMembers(EnumDeclaration enum_item, int hlevel)
	section
		- heading(hlevel, "Enum members");

		table
			col.caption
			tr
				th Name
				th Description
			- foreach( mem; enum_item.members )
				tr
					- if (info.settings.enumMemberPages)
						td
							a(href="#{info.linkTo(mem)}")
								code= mem.name
						td!= info.formatDoc(mem.docGroup, 4, sec => sec == "$Short")
					- else
						td
							code= mem.name
						td!= info.formatDoc(mem.docGroup, 4, sec => true)
